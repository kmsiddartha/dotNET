"use strict";
// NOTE: We explicitly export the symbols in the root index.ts file to have better control over package's public API.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
exports.__esModule = true;
exports.useContractFunction = exports.useChainMeta = exports.useCalls = exports.useCall = exports.useBlockMeta = exports.useNotificationsContext = exports.useTransactionsContext = exports.useMultiChainStates = exports.DEFAULT_STORED_TRANSACTIONS = exports.DEFAULT_NOTIFICATIONS = exports.chainStateReducer = exports.callsReducer = exports.blockNumberReducer = exports.MultiChainStatesContext = exports.MultiChainStateProvider = exports.InjectedNetworkProvider = exports.ConfigProvider = exports.ConfigContext = exports.BlockNumberContext = exports.BlockNumberProvider = exports.NetworkProvider = exports.NetworkActivator = exports.useUpdateConfig = exports.useNetwork = exports.useInjectedNetwork = exports.useConfig = exports.useBlockNumber = exports.multicall2 = exports.multicall = exports.getStoredTransactionState = exports.DAppProvider = exports.TestBUSD = exports.TestBNB = exports.NATIVE_CURRENCY = exports.MultiCallABI = exports.MultiCall2ABI = exports.MultiCall2 = exports.MultiCall = exports.KovanEther = exports.KovanDai = exports.Ether = exports.ERC20MockInterface = exports.ERC20Mock = exports.ERC20Interface = exports.ERC20 = exports.Dai = exports.DEFAULT_SUPPORTED_CHAINS = exports.BUSD = exports.BNB = exports.ChainId = void 0;
exports.getExplorerTransactionLink = exports.getExplorerAddressLink = exports.getUniqueCalls = exports.getChainName = exports.isTestChain = exports.isLocalChain = exports.getChainMeta = exports.decodeCallResult = exports.encodeCallData = exports.getChainById = exports.warnOnInvalidCall = exports.shortenTransactionHash = exports.shortenIfTransactionHash = exports.shortenIfAddress = exports.shortenAddress = exports.compareAddress = exports.addressEqual = exports.transactionErrored = exports.Token = exports.NativeCurrency = exports.FiatCurrency = exports.CurrencyValue = exports.Currency = exports.useInterval = exports.useDebouncePair = exports.useLocalStorage = exports.useDebounce = exports.connectContractToSigner = exports.useChainState = exports.useChainCalls = exports.useChainCall = exports.useContractCalls = exports.useContractCall = exports.useTransactions = exports.useTokenList = exports.useTokenBalance = exports.useTokenAllowance = exports.useToken = exports.useSendTransaction = exports.useNotifications = exports.useMulticallAddress = exports.useLookupAddress = exports.useGasPrice = exports.useEthers = exports.useEtherBalance = void 0;
var constants_1 = require("./constants");
__createBinding(exports, constants_1, "ChainId");
__createBinding(exports, constants_1, "BNB");
__createBinding(exports, constants_1, "BUSD");
__createBinding(exports, constants_1, "DEFAULT_SUPPORTED_CHAINS");
__createBinding(exports, constants_1, "Dai");
__createBinding(exports, constants_1, "ERC20");
__createBinding(exports, constants_1, "ERC20Interface");
__createBinding(exports, constants_1, "ERC20Mock");
__createBinding(exports, constants_1, "ERC20MockInterface");
__createBinding(exports, constants_1, "Ether");
__createBinding(exports, constants_1, "KovanDai");
__createBinding(exports, constants_1, "KovanEther");
__createBinding(exports, constants_1, "MultiCall");
__createBinding(exports, constants_1, "MultiCall2");
__createBinding(exports, constants_1, "MultiCall2ABI");
__createBinding(exports, constants_1, "MultiCallABI");
__createBinding(exports, constants_1, "NATIVE_CURRENCY");
__createBinding(exports, constants_1, "TestBNB");
__createBinding(exports, constants_1, "TestBUSD");
var providers_1 = require("./providers");
__createBinding(exports, providers_1, "DAppProvider");
__createBinding(exports, providers_1, "getStoredTransactionState");
__createBinding(exports, providers_1, "multicall");
__createBinding(exports, providers_1, "multicall2");
__createBinding(exports, providers_1, "useBlockNumber");
__createBinding(exports, providers_1, "useConfig");
__createBinding(exports, providers_1, "useInjectedNetwork");
__createBinding(exports, providers_1, "useNetwork");
__createBinding(exports, providers_1, "useUpdateConfig");
__createBinding(exports, providers_1, "NetworkActivator");
__createBinding(exports, providers_1, "NetworkProvider");
__createBinding(exports, providers_1, "BlockNumberProvider");
__createBinding(exports, providers_1, "BlockNumberContext");
__createBinding(exports, providers_1, "ConfigContext");
__createBinding(exports, providers_1, "ConfigProvider");
__createBinding(exports, providers_1, "InjectedNetworkProvider");
__createBinding(exports, providers_1, "MultiChainStateProvider");
__createBinding(exports, providers_1, "MultiChainStatesContext");
__createBinding(exports, providers_1, "blockNumberReducer");
__createBinding(exports, providers_1, "callsReducer");
__createBinding(exports, providers_1, "chainStateReducer");
__createBinding(exports, providers_1, "DEFAULT_NOTIFICATIONS");
__createBinding(exports, providers_1, "DEFAULT_STORED_TRANSACTIONS");
__createBinding(exports, providers_1, "useMultiChainStates");
__createBinding(exports, providers_1, "useTransactionsContext");
__createBinding(exports, providers_1, "useNotificationsContext");
var hooks_1 = require("./hooks");
__createBinding(exports, hooks_1, "useBlockMeta");
__createBinding(exports, hooks_1, "useCall");
__createBinding(exports, hooks_1, "useCalls");
__createBinding(exports, hooks_1, "useChainMeta");
__createBinding(exports, hooks_1, "useContractFunction");
__createBinding(exports, hooks_1, "useEtherBalance");
__createBinding(exports, hooks_1, "useEthers");
__createBinding(exports, hooks_1, "useGasPrice");
__createBinding(exports, hooks_1, "useLookupAddress");
__createBinding(exports, hooks_1, "useMulticallAddress");
__createBinding(exports, hooks_1, "useNotifications");
__createBinding(exports, hooks_1, "useSendTransaction");
__createBinding(exports, hooks_1, "useToken");
__createBinding(exports, hooks_1, "useTokenAllowance");
__createBinding(exports, hooks_1, "useTokenBalance");
__createBinding(exports, hooks_1, "useTokenList");
__createBinding(exports, hooks_1, "useTransactions");
// To be removed from public API:
__createBinding(exports, hooks_1, "useContractCall");
__createBinding(exports, hooks_1, "useContractCalls");
__createBinding(exports, hooks_1, "useChainCall");
__createBinding(exports, hooks_1, "useChainCalls");
__createBinding(exports, hooks_1, "useChainState");
__createBinding(exports, hooks_1, "connectContractToSigner");
__createBinding(exports, hooks_1, "useDebounce");
__createBinding(exports, hooks_1, "useLocalStorage");
__createBinding(exports, hooks_1, "useDebouncePair");
__createBinding(exports, hooks_1, "useInterval");
var model_1 = require("./model");
__createBinding(exports, model_1, "Currency");
__createBinding(exports, model_1, "CurrencyValue");
__createBinding(exports, model_1, "FiatCurrency");
__createBinding(exports, model_1, "NativeCurrency");
__createBinding(exports, model_1, "Token");
__createBinding(exports, model_1, "transactionErrored");
__exportStar(require("./model/chain"), exports);
var helpers_1 = require("./helpers");
__createBinding(exports, helpers_1, "addressEqual");
__createBinding(exports, helpers_1, "compareAddress");
__createBinding(exports, helpers_1, "shortenAddress");
__createBinding(exports, helpers_1, "shortenIfAddress");
__createBinding(exports, helpers_1, "shortenIfTransactionHash");
__createBinding(exports, helpers_1, "shortenTransactionHash");
// To be removed from public API:
__createBinding(exports, helpers_1, "warnOnInvalidCall");
__createBinding(exports, helpers_1, "getChainById");
__createBinding(exports, helpers_1, "encodeCallData");
__createBinding(exports, helpers_1, "decodeCallResult");
__createBinding(exports, helpers_1, "getChainMeta");
__createBinding(exports, helpers_1, "isLocalChain");
__createBinding(exports, helpers_1, "isTestChain");
__createBinding(exports, helpers_1, "getChainName");
__createBinding(exports, helpers_1, "getUniqueCalls");
__createBinding(exports, helpers_1, "getExplorerAddressLink");
__createBinding(exports, helpers_1, "getExplorerTransactionLink");
//# sourceMappingURL=index.js.map